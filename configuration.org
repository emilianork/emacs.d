
#+TITLE: Emacs configuration
#+AUTHOR: Emiliano Cabrera
#+EMAIL: jemiliano.cabrera@protonmail.com

This repository contains my Emacs configuration. It is written and documented
using literate programming style. I'm basing this version on
[[https://github.com/munen/emacs.d]].

* Installation

** Initial *

Emacs configuration is usually done in the home directory in the =emacs.d=
folder. This holds true for Unix and Linux Systems. For Windows, look it up
[[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html][here]].

=git clone git@github.com:emilianork/emacs.d.git ~/.emacs.d=

** Dependencies *

Emacs dependencies/libraries are managed via the internal [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages][package management
system]]. To initially install packages, open =~/.emacs.d/init.el=, refresh your
package list with =M-x package-refresh-contents= and install everything using
=M-x eval-buffer=.

** Dependency managment

*** Define package repositories(archives)

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu" .          "https://elpa.gnu.org/packages/")
                           ("marmalade" .    "https://marmalade-repo.org/packages/")
                           ("melpa" .        "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")))
#+END_SRC

*** Define packages that are to be installed

List all used third-party packages. Most will be configured further
in separate files, some are used with the default configuration.

#+BEGIN_SRC emacs-lisp
  (defvar my-packages '(ag
			aggressive-indent
			alert
			auctex
			beacon
			challenger-deep-theme
			cider
			clojure-mode
			command-log-mode
			company
			company-go
			company-terraform
			csv
			cyberpunk-theme
			darkokai-theme
			diminish
			docker
			docker-tramp
			dockerfile-mode
			doneburn-theme
			dracula-theme
			dumb-jump
			editorconfig
			elfeed
			esup
			expand-region
			exec-path-from-shell
			flycheck
			fringe-current-line
			ggtags
			git-gutter-fringe
			go-mode
			hungry-delete
			ivy counsel-tramp
			magit
			markdown-mode
			material-theme
			monokai-alt-theme
			monokai-theme
			multi-term
			nyan-mode
			org-bullets
			paredit
			powerline
			rainbow-delimiters
			smartparens
			slime
			spacemacs-theme
			spinner
			sunburn-theme
			terraform-mode
			undo-tree
			use-package
			vlf
			which-key
			yaml-mode
			yasnippet
			yasnippet-snippets
			zone-nyan))
#+END_SRC

*** Install packages
#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (unless (package-installed-p p)
      (package-refresh-contents)
      (package-install p)
    (add-to-list 'package-selected-packages p)))
#+END_SRC

* Select theme
Current themes available are:

+ challenger-deep
+ cyberpunk
+ doneburn
+ darkokai
+ dracula
+ material
+ material-light
+ monokai
+ monokai-alt
+ spacemacs-dark
+ spacemacs-light
+ sunburn

#+BEGIN_SRC emacs-lisp
  (load-theme 'material-light t)
#+END_SRC

* Default Settings
This section contains settings for built-in Emacs features.

** Gargabe Collection

Allow 20MB of memory (instead of 0.76MB) before calling garbage
collection. This means GC runs less often, which speeds up some
operations.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC

** Enable erase-buffer function

~erase-buffer~ is consider to be confusing by beginners. This
actives the functionality again.

#+BEGIN_SRC emacs-lisp
  (put 'erase-buffer 'disabled nil)
  (global-set-key (kbd "C-c E")  'erase-buffer)
#+END_SRC

** Do not create backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** Cursor customization
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
  (setq-default cursor-type 'hbar)
#+END_SRC

** Scroll one line at a time
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1)
#+END_SRC

** Don't accelerate scrolling
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC

** Enable scroll with mouse
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-follow-mouse 't)
#+END_SRC

** Indent using spaces, not tabs by default
#+BEGIN_SRC emacs-lisp
  (setq-default ndent-tabs-mode nil)
#+END_SRC

** Don't save files like #..
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** No Splash
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
  (setq initial-major-mode 'emacs-lisp-mode)
#+END_SRC

** Initial major-mode
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'emacs-lisp-mode)
#+END_SRC

** Don't show scroll-bar and icons
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
#+END_SRC

** Right metadata recerved for Mac
#+BEGIN_SRC emacs-lisp
  (setq mac-option-key-is-meta t)
  (setq mac-right-option-modifier nil)
#+END_SRC

** downcase-region disabled
#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
#+END_SRC

** ispell default dictionary languagues
#+BEGIN_SRC emacs-lisp
  (setq ispell-dictionary "castellano,english")
#+END_SRC

** Show column number
#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

** Set internal border settings
#+BEGIN_SRC emacs-lisp
  (setq internal-border-width 10)
#+END_SRC

** Text size key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

** Show trailing whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC

** Uniquify settings

Buffers has unique names, even when two different files with same name are open.

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)

  (setq uniquify-buffer-name-style 'forward)
#+END_SRC

** Show paren hooks

Show paren mode highlihts the maching parenthesis of the current cursor.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
  (add-hook 'go-mode-hook 'show-paren-mode)
  (add-hook 'json-mode-hook 'show-paren-mode)
  (add-hook 'python-mode-hook 'show-paren-mode)
  (add-hook 'ruby-mode-hook 'show-paren-mode)
  (add-hook 'clojure-mode-hook 'show-paren-mode)
  (add-hook 'clojurescript-mode-hook 'show-paren-mode)
  (add-hook 'clojurec-mode-hook 'show-paren-mode)
  (add-hook 'cider-repl-mode-hook 'show-paren-mode)
#+END_SRC

** Org Settings

This will change the headers font size and items states of todo lists

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)

  (setq org-todo-keywords
	'((sequence "BACKLOG" "TODO" "STARTED" "DONE")))
  (setq org-todo-keyword-faces
	'(("BACKLOG" . "red3") ("STARTED" . "violet")
	  ("TODO" . "dark khaki") ("DONE" . "light green")))
#+END_SRC
** Dired Mode Settings
Dired makes an Emacs buffer containing a listing of a directory, and optionally
some of its subdirectories as well.

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+END_SRC

** Enabled windmove
Windmove is built into Emacs. It lets you move point from window to window using
Shift and the arrow keys. This is easier to type than ‘C-x o’ when there are
multiple windows open.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+END_SRC
** Enabled winner-mode
Allows to ~undo~ (and ~redo~) changes in the window configuration with the key
commands ~C-c left~ and ~C-c right~.

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC
** CustomFile
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom-settings.el")
  (load custom-file t)
#+END_SRC
** Delete selection mode

 When Delete Selection mode is enabled, typed text replaces the
 selection if the selection is active.  Otherwise, typed text is
 just inserted at point regardless of any selection.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC
* Packages Settings

This section contains settings for some of the packages downloaded.
** Beacon

Beacon Repo [[https://github.com/Malabarba/beacon/tree/master]]

Whenever the window scrolls a light will shine on top of the cursor so I know
where it is.

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :init (beacon-mode t))
#+END_SRC

** Powerline

Powerline Repo [[https://github.com/milkypostman/powerline/tree/master]]

Emacs version of the Vim powerline.

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :init (powerline-default-theme))
#+END_SRC

** Exec-path-from-shell

exec-path-from-shell repo [[https://github.com/purcell/exec-path-from-shell/]]

A GNU Emacs library to ensure environment variables inside Emacs look the same
as in the user's shell.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC

** Multi term

multi-term repo [[https://github.com/emacsorphanage/multi-term/]]

Managing multiple terminal buffers in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :custom (multi-term-buffer-name "Term")
    :config
    ;; This code was copy paste from the internet long time ago but I don't
    ;; remember from who (sorry for the credits).
    (defun emilianork/multi-term-here ()
      "Opens up a new shell in the directory associated with the
  current buffer's file. The shell is renamed to match that
  directory to make multiple shell windows easier."
      (interactive)
      (let* ((height (/ (window-total-height) 2)))
	(split-window-vertically (- height))
	(other-window 1)
	(multi-term)))

    (defun emilianork/multi-term-kill ()
      "Send ESC in term mode."
      (interactive)
      (term-send-raw-string "exit\n")
      (delete-window))

    (add-hook 'term-mode-hook
	      (lambda ()
		(setq show-trailing-whitespace nil)))

    (global-set-key (kbd "C-!") 'emilianork/multi-term-here)
    (global-set-key (kbd "C-#") 'emilianork/multi-term-kill))
#+END_SRC
** Swiper

Ivy, a generic completion mechanism for Emacs.

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

Swiper, an Ivy-enhanced alternative to isearch.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :init
    (progn
      (add-hook 'pdf-view-mode-hook
		'(lambda()
		   (define-key pdf-view-mode-map "\C-s" 'isearch-forward))))
    :config
    (ivy-mode t)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

    :bind
    ("C-s"     . 'swiper)
    ("C-c C-r" . 'ivy-resume)
    ("<f6>"    . 'ivy-resume)
    ("M-x"     . 'counsel-M-x)
    ("C-x C-f" . 'counsel-find-file)
    ("<f1> f"  . 'counsel-describe-function)
    ("<f1> v"  . 'counsel-describe-variable)
    ("<f1> l"  . 'counsel-find-library)
    ("<f2> i"  . 'counsel-info-lookup-symbol)
    ("<f2> u"  . 'counsel-unicode-char)
    ("C-c g"   . 'counsel-git)
    ("C-c j"   . 'counsel-git-grep)
    ("C-c k"   . 'counsel-ag)
    ("C-x l"   . 'counsel-locate)
    ("M-y"     . 'counsel-yank-pop)
    ("C-S-o"   . 'counsel-rhythmbox))
#+END_SRC

** Undo-tree

undo-tree repo [[https://elpa.gnu.org/packages/undo-tree.html]]

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t))
#+END_SRC

** vlf

vlf repo [[https://github.com/m00natic/vlfi/tree/master]]

Emacs minor mode that allows viewing, editing, searching and comparing large
files in batches, trading memory for processor time.

#+BEGIN_SRC emacs-lisp
  (use-package vlf
    :config (defun emilianork/vlf (file)
              (emilianork/require-package 'vlf 'vlf-setup)
              (interactive "fFile to open: ")
              (vlf file)))
#+END_SRC

** Diminish

diminish repo [[https://github.com/myrjola/diminish.el/tree/master]]

Diminished modes are minor modes with no modeline display.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :config
    (diminish 'auto-revert-mode)
    (diminish 'eldoc-mode)
    (diminish 'org-src-mode)
    (diminish 'cider-mode))
#+END_SRC

** Git gutter

git-gutter repo [[https://github.com/syohex/emacs-git-gutter/tree/master]]

Emacs port of GitGutter which is Sublime Text Plugin.

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode))
#+END_SRC

** Magit

Magit repo [[https://github.com/magit/magit/tree/master]]

It's Magit! A Git porcelain inside Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

** Dumb-jump

dumb-jump repo [[https://github.com/jacktasia/dumb-jump/tree/master]]

An Emacs "jump to definition" package

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :init
    (progn
      (add-hook 'emacs-lisp-mode-hook 'dumb-jump-mode)
      (add-hook 'python-mode-hook 'dumb-jump-mode)
      (add-hook 'ruby-mode-hook 'dumb-jump-mode)
      (add-hook 'clojure-mode-hook 'dumb-jump-mode)
      (add-hook 'clojurescript-mode-hook 'dumb-jump-mode)
      (add-hook 'clojurec-mode-hook 'dumb-jump-mode)))
#+END_SRC

** Paredit

Paredit Repo [[https://melpa.org/packages/paredit-20171126.1805.el]]

Minor mode for editing parentheses

Links of interest:
+ paredit animated cheatsheet [[http://danmidwood.com/content/2014/11/21/animated-paredit.html]]

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :diminish paredit-mode
    :init
    (progn
      (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
      (add-hook 'clojure-mode-hook 'paredit-mode)
      (add-hook 'clojurescript-mode-hook 'paredit-mode)
      (add-hook 'clojurec-mode-hook 'paredit-mode)
      (add-hook 'cider-repl-mode-hook 'paredit-mode)))
#+END_SRC

** Rainbow delimiters

rainbow-delimiters repo [[https://github.com/Fanael/rainbow-delimiters/tree/master]]

rainbow-delimiters is a "rainbow parentheses"-like mode which highlights
delimiters such as parentheses, brackets or braces according to their depth.
Each successive level is highlighted in a different color.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init
    (progn
      (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'json-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'go-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'terraform-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'clojurescript-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'clojurec-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC

** EditorConfig

editorconfig repo [[https://github.com/editorconfig/editorconfig-emacs/tree/master]]

EditorConfig plugin for emacs http://editorconfig.org

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :diminish editorconfig-mode
    :config
    (editorconfig-mode 1))
#+END_SRC

** Aggressive Indent

aggressive-indent repo https://github.com/Malabarba/aggressive-indent-mode/tree/master

Emacs minor mode that keeps your code always indented. More reliable than electric-indent-mode.

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :diminish aggressive-indent-mode
    :init
    (progn
      (add-hook 'emacs-lisp-mode-hook 'aggressive-indent-mode)
      (add-hook 'go-mode-hook 'aggressive-indent-mode)
      (add-hook 'json-mode-hook 'aggressive-indent-mode)
      (add-hook 'ruby-mode-hook 'aggressive-indent-mode)
      (add-hook 'clojure-mode-hook 'aggressive-indent-mode)
      (add-hook 'clojurescript-mode-hook 'aggressive-indent-mode)
      (add-hook 'clojurec-mode-hook 'aggressive-indent-mode)
      (add-hook 'cider-repl-mode-hook 'aggressive-indent-mode)))
#+END_SRC
** Company

company repo [[https://github.com/company-mode/company-mode/tree/master]]

Modular in-buffer completion framework for Emacs http://company-mode.github.io/

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :config
    (global-company-mode))
#+END_SRC

** Clojure-mode

clojure-mode Repo [[https://github.com/clojure-emacs/clojure-mode/tree/master]]

Emacs support for the Clojure(Script) programming language.

#+BEGIN_SRC emacs-lisp
  (defun emilianork/cider-figwheel-repl ()
    (interactive)
    (with-current-buffer
        (cider-current-repl-buffer)
      (goto-char (point-max))
      (insert "(require 'figwheel-sidecar.repl-api)
               (figwheel-sidecar.repl-api/start-figwheel!)
               (figwheel-sidecar.repl-api/cljs-repl)")
      (cider-repl-return)))

  (use-package clojure-mode
    :bind
    ("C-c M-f" . 'emilianork/cider-figwheel-repl))
#+END_SRC
** Cider

Cider repo [[https://github.com/clojure-emacs/cider/tree/master/]]

The Clojure Interactive Development Environment that Rocks for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package cider)
#+END_SRC

** Nyan cat

nyan-cat repo [[https://github.com/TeMPOraL/nyan-mode/]]

Nyan Mode - Turn your Emacs into Nyanmacs! :)

#+BEGIN_SRC emacs-lisp

  ;; (use-package nyan-mode
  ;;   :config
  ;;   (nyan-mode))

#+END_SRC
** Org Bullets

org-bullets repo [[https://github.com/emacsorphanage/org-bullets/tree/master]]

Show org-mode bullets as UTF-8 characters.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** Elfeed

Elfeed Repo [[https://github.com/skeeto/elfeed]]

Elfeed is an extensible web feed reader for Emacs, supporting both Atom and RSS.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :custom (elfeed-feeds
	     '("http://sachachua.com/blog/feed/"
	       "https://www.reddit.com/r/programming/.rss"
	       "http://planet.emacsen.org/atom.xml"))
    (elfeed-db-directory "~/.emacs.d/elfeed"))
#+END_SRC
** Flycheck

flycheck repo [[http://www.flycheck.org/en/latest/]]

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs,
intended as replacement for the older Flymake extension which is part of
GNU Emacs. For a detailed comparison to Flymake see Flycheck versus
Flymake.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :config (global-flycheck-mode))
#+END_SRC
** Dockerfile
dockerfile repo [[https://github.com/spotify/dockerfile-mode/tree/master]]

An emacs mode for handling Dockerfiles

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC

** Go Mode

go-mode repo [[https://github.com/dominikh/go-mode.el/tree/master]]

Emacs mode for the Go programming language

#+BEGIN_SRC emacs-lisp
  (use-package go-mode)
#+END_SRC
** JSON Mode

json-mode repo [[https://github.com/joshwnj/json-mode/tree/master]]

Major mode for editing JSON files.

Extends the builtin js-mode to add better syntax highlighting for JSON and some
nice editing keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC
** Terraform mode

terraform-mode repo [[https://github.com/syohex/emacs-terraform-mode/tree/master]]

Major mode of Terraform configuration file

#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode)
#+END_SRC

** Markdown mode

markdown-mode repo [[https://github.com/jrblevin/markdown-mode/tree/master]]

markdown-mode is a major mode for editing Markdown-formatted text.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC
** Auctex

Auctex repo [[https://elpa.gnu.org/packages/auctex.html]]

AUCTEX is an extensible package for writing and formatting TEX files in GNU
Emacs. It supports many different TEX macro packages, including AMS-TEX, LATEX,
Texinfo, ConTEXt, and docTEX (dtx files).
AUCTEX includes preview-latex which makes LATEX a tightly integrated component
of your editing workflow by visualizing selected source chunks (such as single
formulas or graphics) directly as images in the source buffer.

#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :config
    (defun emilianork/tex-site-custom ()
      ;; Adds latexmk-dvi to the compilation commands list
      (push '("latexmk-dvi" "latexmk %s && dvipdf %s" TeX-run-TeX nil t :help "Run latexmk on file")
	    TeX-command-list)

      (setq TeX-command-default "latexmk-dvi")
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq TeX-PDF-mode t)
      (setq reftex-plug-into-AUCTeX t)
      (setq TeX-command-default "latexmk-dvi")

      (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))

      (setq TeX-view-program-list
	    '(("PDF Viewer"
	       "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

      (turn-on-auto-fill)
      (set-fill-column 80))
    (progn
      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      (add-hook 'LaTeX-mode-hook 'emilianork/tex-site-custom)))
#+END_SRC

** Which-key

which-key repo [[https://github.com/justbur/emacs-which-key/tree/master]]

Emacs package that displays available keybindings in popup

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (progn
      (which-key-mode)
      (setq which-key-idle-delay 0.3)))
#+END_SRC

** Slime

slime repo [[https://github.com/slime/slime]]

The Superior Lisp Interaction Mode for Emacs


#+BEGIN_SRC emacs-lisp
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+END_SRC

** Command log

command-log-mode repo [[https://github.com/lewang/command-log-mode/tree/master]]

Show event history and command history of some or all buffers.

To see the log buffer, call M-x clm/open-command-log-buffer.

The key strokes in the log are decorated with ISO9601 timestamps on
the property `:time' so if you want to convert the log for
screencasting purposes you could use the time stamp as a key into
the video beginning.

#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :diminish command-log-mode)
#+END_SRC

** Yasnippet

yasnippet repo [[https://github.com/joaotavora/yasnippet/tree/master]]

YASnippet is a template system for Emacs. It allows you to type an abbreviation
and automatically expand it into function templates. Bundled language templates
include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (progn
      (yas-global-mode 1)
      ;; we don't want yasnippet running in terminals
      (add-hook 'term-mode-hook (lambda()
				  (yas-minor-mode -1)))))
#+END_SRC

** Smartparens

smartparens repo [[https://github.com/Fuco1/smartparens/tree/master]]

Minor mode for Emacs that deals with parens pairs and tries to be smart about
it.

#+begin_src emacs-lisp
  (use-package smartparens
    :diminish smartparens-strict-mode
    :init
    (add-hook 'c-mode-common-hook #'smartparens-strict-mode))
#+end_src

** Hungry delete

hungry-delete repo [[https://github.com/nflath/hungry-delete]]

This package implements hungry deletion, meaning that deleting a whitespace
character will delete all whitespace until the next non-whitespace character.

#+begin_src emacs-lisp
  (use-package hungry-delete
    :diminish hungry-delete-mode
    :init
    (global-hungry-delete-mode))
#+end_src

** Expand region

expand-region.el repo [[https://github.com/magnars/expand-region.el]]

Expand region increases the selected region by semantic units. Just keep
pressing the key until it selects what you want.

#+begin_src emacs-lisp
  (use-package expand-region
    :init
    (global-set-key (kbd "C-c =") 'er/expand-region))
#+end_src

** GGtags

ggtags repo [[https://github.com/leoliu/ggtags/tree/master]]

Emacs frontend to GNU Global source code tagging system.

#+begin_src emacs-lisp
  ;; tags for code navigation
  (use-package ggtags
    :diminish ggtags-mode
    :config
    (add-hook 'c-mode-common-hook
	      (lambda ()
		(when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		  (ggtags-mode 1)))))

#+end_src

* Custom Functions

Custom functions that add/modify Emacs functionality.

#+BEGIN_SRC emacs-lisp
  (defun emilianork/revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  (defun emilianork/rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
	  (filename (buffer-file-name)))
      (if (not filename)
	  (message "Buffer '%s' is not visiting a file!" name)
	(if (get-buffer new-name)
	    (message "A buffer named '%s' already exists!" new-name)
	  (progn
	    (rename-file filename new-name 1)
	    (rename-buffer new-name)
	    (set-visited-file-name new-name)
	    (set-buffer-modified-p nil))))))

  (defun emilianork/indent-whole-buffer ()
    "Indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (defun emilianork/kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer
	  (set-difference (buffer-list)
			  (cons (current-buffer)
				(mapcar (lambda (x) (process-buffer x)) (process-list))))))


  ;; Code from FrankRuben27 reddit user.
  (defun emilianork/goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
	(progn
	  (linum-mode 1)
	  (call-interactively #'goto-line))
      (linum-mode -1)))

  (global-set-key (kbd "M-n b r") 'emilianork/revert-buffer-no-confirm)
  (global-set-key (kbd "M-n b i") 'emilianork/indent-whole-buffer)
  (global-set-key (kbd "M-n b k") 'emilianork/kill-other-buffers)

  ;; go-to is binded to more than one keyscombination.
  (global-set-key (kbd "M-g M-g") 'emilianork/goto-line-with-feedback)
  (global-set-key (kbd "M-g g")   'emilianork/goto-line-with-feedback)

  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC
* Personal Settings

Personal settings contains all the sensitive information that cannot be shared
publicly.

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/.emacs.d/personal.org")
      (org-babel-load-file "~/.emacs.d/personal.org"))
#+END_SRC
